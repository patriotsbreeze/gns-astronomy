{"ast":null,"code":"var _jsxFileName = \"/Users/brendanlo/Documents/GitHub/gns-astronomy/src/components/PlanetaryRingSystem.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CanvasContainer = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: -1;\n`;\n_c = CanvasContainer;\nconst PlanetaryRingSystem = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const animationFrameId = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    let width = window.innerWidth;\n    let height = window.innerHeight;\n\n    // Set canvas dimensions\n    canvas.width = width;\n    canvas.height = height;\n\n    // Planet class\n    class Planet {\n      constructor(x, y, radius, color, ringColor, ringWidth, ringAngle, rotationSpeed) {\n        this.x = x;\n        this.y = y;\n        this.radius = radius;\n        this.color = color;\n        this.ringColor = ringColor;\n        this.ringWidth = ringWidth;\n        this.ringAngle = ringAngle;\n        this.rotationSpeed = rotationSpeed;\n        this.rotation = 0;\n        this.orbitRadius = Math.random() * 100 + 50;\n        this.orbitSpeed = Math.random() * 0.001 + 0.0005;\n        this.orbitAngle = Math.random() * Math.PI * 2;\n        this.centerX = x;\n        this.centerY = y;\n        this.moons = [];\n\n        // Create moons\n        const moonCount = Math.floor(Math.random() * 3) + 1;\n        for (let i = 0; i < moonCount; i++) {\n          this.moons.push({\n            radius: this.radius * (Math.random() * 0.2 + 0.1),\n            distance: this.radius * (Math.random() * 2 + 2),\n            angle: Math.random() * Math.PI * 2,\n            speed: Math.random() * 0.02 + 0.01,\n            color: `rgba(${Math.random() * 155 + 100}, ${Math.random() * 155 + 100}, ${Math.random() * 155 + 100}, 0.8)`\n          });\n        }\n      }\n      update() {\n        // Update planet orbit position\n        this.orbitAngle += this.orbitSpeed;\n        this.x = this.centerX + Math.cos(this.orbitAngle) * this.orbitRadius;\n        this.y = this.centerY + Math.sin(this.orbitAngle) * this.orbitRadius;\n\n        // Update planet rotation\n        this.rotation += this.rotationSpeed;\n\n        // Update moons\n        this.moons.forEach(moon => {\n          moon.angle += moon.speed;\n        });\n      }\n      draw(ctx) {\n        ctx.save();\n        ctx.translate(this.x, this.y);\n\n        // Draw planet\n        const gradient = ctx.createRadialGradient(0, 0, 0, 0, 0, this.radius);\n        gradient.addColorStop(0, this.color);\n        gradient.addColorStop(1, `rgba(0, 0, 0, 0.5)`);\n        ctx.beginPath();\n        ctx.arc(0, 0, this.radius, 0, Math.PI * 2);\n        ctx.fillStyle = gradient;\n        ctx.fill();\n\n        // Draw surface details\n        ctx.save();\n        ctx.rotate(this.rotation);\n        ctx.beginPath();\n\n        // Add bands or surface features\n        const bandCount = Math.floor(Math.random() * 3) + 2;\n        for (let i = 0; i < bandCount; i++) {\n          const bandY = (i - bandCount / 2) * this.radius * 0.4;\n          const bandHeight = this.radius * 0.2;\n          ctx.fillStyle = `rgba(255, 255, 255, 0.1)`;\n          ctx.fillRect(-this.radius, bandY, this.radius * 2, bandHeight);\n        }\n        ctx.restore();\n\n        // Draw ring\n        ctx.save();\n        ctx.rotate(this.ringAngle);\n        ctx.scale(1, 0.2); // Flatten to create ellipse\n\n        // Outer ring\n        const ringGradient = ctx.createRadialGradient(0, 0, this.radius, 0, 0, this.radius + this.ringWidth);\n        ringGradient.addColorStop(0, `rgba(${this.ringColor}, 0.1)`);\n        ringGradient.addColorStop(0.4, `rgba(${this.ringColor}, 0.6)`);\n        ringGradient.addColorStop(0.6, `rgba(${this.ringColor}, 0.8)`);\n        ringGradient.addColorStop(0.8, `rgba(${this.ringColor}, 0.4)`);\n        ringGradient.addColorStop(1, `rgba(${this.ringColor}, 0.1)`);\n        ctx.beginPath();\n        ctx.arc(0, 0, this.radius + this.ringWidth, 0, Math.PI * 2);\n        ctx.arc(0, 0, this.radius, 0, Math.PI * 2, true);\n        ctx.fillStyle = ringGradient;\n        ctx.fill();\n\n        // Ring details - add some lines\n        for (let i = 0; i < 8; i++) {\n          const ringRadius = this.radius + this.ringWidth * (i / 8);\n          ctx.beginPath();\n          ctx.arc(0, 0, ringRadius, 0, Math.PI * 2);\n          ctx.strokeStyle = `rgba(${this.ringColor}, ${Math.random() * 0.2 + 0.1})`;\n          ctx.lineWidth = Math.random() * 2 + 0.5;\n          ctx.stroke();\n        }\n        ctx.restore();\n\n        // Draw moons\n        this.moons.forEach(moon => {\n          const moonX = Math.cos(moon.angle) * moon.distance;\n          const moonY = Math.sin(moon.angle) * moon.distance;\n          ctx.beginPath();\n          ctx.arc(moonX, moonY, moon.radius, 0, Math.PI * 2);\n          ctx.fillStyle = moon.color;\n          ctx.fill();\n\n          // Moon shadow\n          ctx.beginPath();\n          ctx.arc(moonX, moonY, moon.radius, 0, Math.PI * 2);\n          ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';\n          ctx.fill();\n        });\n\n        // Draw shadow\n        ctx.beginPath();\n        ctx.arc(5, 5, this.radius, 0, Math.PI * 2);\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';\n        ctx.fill();\n        ctx.restore();\n      }\n    }\n\n    // Create planets with rings\n    const planets = [new Planet(width * 0.25, height * 0.3, 40, 'rgba(218, 165, 32, 1)', '255, 215, 0', 60, Math.PI / 6, 0.005), new Planet(width * 0.75, height * 0.7, 50, 'rgba(147, 112, 219, 1)', '138, 43, 226', 80, -Math.PI / 8, 0.003), new Planet(width * 0.6, height * 0.2, 30, 'rgba(70, 130, 180, 1)', '30, 144, 255', 45, Math.PI / 4, 0.007)];\n\n    // Animation loop\n    const animate = () => {\n      ctx.clearRect(0, 0, width, height);\n\n      // Update and draw planets\n      planets.forEach(planet => {\n        planet.update();\n        planet.draw(ctx);\n      });\n      animationFrameId.current = requestAnimationFrame(animate);\n    };\n    animate();\n\n    // Handle window resize\n    const handleResize = () => {\n      width = window.innerWidth;\n      height = window.innerHeight;\n      canvas.width = width;\n      canvas.height = height;\n\n      // Reposition planets\n      planets[0].centerX = width * 0.25;\n      planets[0].centerY = height * 0.3;\n      planets[1].centerX = width * 0.75;\n      planets[1].centerY = height * 0.7;\n      planets[2].centerX = width * 0.6;\n      planets[2].centerY = height * 0.2;\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      cancelAnimationFrame(animationFrameId.current);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(CanvasContainer, {\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 237,\n    columnNumber: 5\n  }, this);\n};\n_s(PlanetaryRingSystem, \"Rfn34oS1ODdV6cItKU2kKgVT1r8=\");\n_c2 = PlanetaryRingSystem;\nexport default PlanetaryRingSystem;\nvar _c, _c2;\n$RefreshReg$(_c, \"CanvasContainer\");\n$RefreshReg$(_c2, \"PlanetaryRingSystem\");","map":{"version":3,"names":["React","useEffect","useRef","styled","jsxDEV","_jsxDEV","CanvasContainer","div","_c","PlanetaryRingSystem","_s","canvasRef","animationFrameId","canvas","current","ctx","getContext","width","window","innerWidth","height","innerHeight","Planet","constructor","x","y","radius","color","ringColor","ringWidth","ringAngle","rotationSpeed","rotation","orbitRadius","Math","random","orbitSpeed","orbitAngle","PI","centerX","centerY","moons","moonCount","floor","i","push","distance","angle","speed","update","cos","sin","forEach","moon","draw","save","translate","gradient","createRadialGradient","addColorStop","beginPath","arc","fillStyle","fill","rotate","bandCount","bandY","bandHeight","fillRect","restore","scale","ringGradient","ringRadius","strokeStyle","lineWidth","stroke","moonX","moonY","planets","animate","clearRect","planet","requestAnimationFrame","handleResize","addEventListener","removeEventListener","cancelAnimationFrame","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["/Users/brendanlo/Documents/GitHub/gns-astronomy/src/components/PlanetaryRingSystem.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\n\nconst CanvasContainer = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: -1;\n`;\n\nconst PlanetaryRingSystem = () => {\n  const canvasRef = useRef(null);\n  const animationFrameId = useRef(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    let width = window.innerWidth;\n    let height = window.innerHeight;\n\n    // Set canvas dimensions\n    canvas.width = width;\n    canvas.height = height;\n\n    // Planet class\n    class Planet {\n      constructor(x, y, radius, color, ringColor, ringWidth, ringAngle, rotationSpeed) {\n        this.x = x;\n        this.y = y;\n        this.radius = radius;\n        this.color = color;\n        this.ringColor = ringColor;\n        this.ringWidth = ringWidth;\n        this.ringAngle = ringAngle;\n        this.rotationSpeed = rotationSpeed;\n        this.rotation = 0;\n        this.orbitRadius = Math.random() * 100 + 50;\n        this.orbitSpeed = Math.random() * 0.001 + 0.0005;\n        this.orbitAngle = Math.random() * Math.PI * 2;\n        this.centerX = x;\n        this.centerY = y;\n        this.moons = [];\n        \n        // Create moons\n        const moonCount = Math.floor(Math.random() * 3) + 1;\n        for (let i = 0; i < moonCount; i++) {\n          this.moons.push({\n            radius: this.radius * (Math.random() * 0.2 + 0.1),\n            distance: this.radius * (Math.random() * 2 + 2),\n            angle: Math.random() * Math.PI * 2,\n            speed: Math.random() * 0.02 + 0.01,\n            color: `rgba(${Math.random() * 155 + 100}, ${Math.random() * 155 + 100}, ${Math.random() * 155 + 100}, 0.8)`\n          });\n        }\n      }\n\n      update() {\n        // Update planet orbit position\n        this.orbitAngle += this.orbitSpeed;\n        this.x = this.centerX + Math.cos(this.orbitAngle) * this.orbitRadius;\n        this.y = this.centerY + Math.sin(this.orbitAngle) * this.orbitRadius;\n        \n        // Update planet rotation\n        this.rotation += this.rotationSpeed;\n        \n        // Update moons\n        this.moons.forEach(moon => {\n          moon.angle += moon.speed;\n        });\n      }\n\n      draw(ctx) {\n        ctx.save();\n        ctx.translate(this.x, this.y);\n        \n        // Draw planet\n        const gradient = ctx.createRadialGradient(0, 0, 0, 0, 0, this.radius);\n        gradient.addColorStop(0, this.color);\n        gradient.addColorStop(1, `rgba(0, 0, 0, 0.5)`);\n        \n        ctx.beginPath();\n        ctx.arc(0, 0, this.radius, 0, Math.PI * 2);\n        ctx.fillStyle = gradient;\n        ctx.fill();\n        \n        // Draw surface details\n        ctx.save();\n        ctx.rotate(this.rotation);\n        ctx.beginPath();\n        \n        // Add bands or surface features\n        const bandCount = Math.floor(Math.random() * 3) + 2;\n        for (let i = 0; i < bandCount; i++) {\n          const bandY = (i - bandCount/2) * this.radius * 0.4;\n          const bandHeight = this.radius * 0.2;\n          ctx.fillStyle = `rgba(255, 255, 255, 0.1)`;\n          ctx.fillRect(-this.radius, bandY, this.radius * 2, bandHeight);\n        }\n        \n        ctx.restore();\n        \n        // Draw ring\n        ctx.save();\n        ctx.rotate(this.ringAngle);\n        ctx.scale(1, 0.2); // Flatten to create ellipse\n        \n        // Outer ring\n        const ringGradient = ctx.createRadialGradient(0, 0, this.radius, 0, 0, this.radius + this.ringWidth);\n        ringGradient.addColorStop(0, `rgba(${this.ringColor}, 0.1)`);\n        ringGradient.addColorStop(0.4, `rgba(${this.ringColor}, 0.6)`);\n        ringGradient.addColorStop(0.6, `rgba(${this.ringColor}, 0.8)`);\n        ringGradient.addColorStop(0.8, `rgba(${this.ringColor}, 0.4)`);\n        ringGradient.addColorStop(1, `rgba(${this.ringColor}, 0.1)`);\n        \n        ctx.beginPath();\n        ctx.arc(0, 0, this.radius + this.ringWidth, 0, Math.PI * 2);\n        ctx.arc(0, 0, this.radius, 0, Math.PI * 2, true);\n        ctx.fillStyle = ringGradient;\n        ctx.fill();\n        \n        // Ring details - add some lines\n        for (let i = 0; i < 8; i++) {\n          const ringRadius = this.radius + (this.ringWidth * (i / 8));\n          ctx.beginPath();\n          ctx.arc(0, 0, ringRadius, 0, Math.PI * 2);\n          ctx.strokeStyle = `rgba(${this.ringColor}, ${Math.random() * 0.2 + 0.1})`;\n          ctx.lineWidth = Math.random() * 2 + 0.5;\n          ctx.stroke();\n        }\n        \n        ctx.restore();\n        \n        // Draw moons\n        this.moons.forEach(moon => {\n          const moonX = Math.cos(moon.angle) * moon.distance;\n          const moonY = Math.sin(moon.angle) * moon.distance;\n          \n          ctx.beginPath();\n          ctx.arc(moonX, moonY, moon.radius, 0, Math.PI * 2);\n          ctx.fillStyle = moon.color;\n          ctx.fill();\n          \n          // Moon shadow\n          ctx.beginPath();\n          ctx.arc(moonX, moonY, moon.radius, 0, Math.PI * 2);\n          ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';\n          ctx.fill();\n        });\n        \n        // Draw shadow\n        ctx.beginPath();\n        ctx.arc(5, 5, this.radius, 0, Math.PI * 2);\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';\n        ctx.fill();\n        \n        ctx.restore();\n      }\n    }\n\n    // Create planets with rings\n    const planets = [\n      new Planet(\n        width * 0.25, \n        height * 0.3, \n        40, \n        'rgba(218, 165, 32, 1)', \n        '255, 215, 0', \n        60, \n        Math.PI / 6, \n        0.005\n      ),\n      new Planet(\n        width * 0.75, \n        height * 0.7, \n        50, \n        'rgba(147, 112, 219, 1)', \n        '138, 43, 226', \n        80, \n        -Math.PI / 8, \n        0.003\n      ),\n      new Planet(\n        width * 0.6, \n        height * 0.2, \n        30, \n        'rgba(70, 130, 180, 1)', \n        '30, 144, 255', \n        45, \n        Math.PI / 4, \n        0.007\n      )\n    ];\n\n    // Animation loop\n    const animate = () => {\n      ctx.clearRect(0, 0, width, height);\n      \n      // Update and draw planets\n      planets.forEach(planet => {\n        planet.update();\n        planet.draw(ctx);\n      });\n      \n      animationFrameId.current = requestAnimationFrame(animate);\n    };\n    \n    animate();\n\n    // Handle window resize\n    const handleResize = () => {\n      width = window.innerWidth;\n      height = window.innerHeight;\n      canvas.width = width;\n      canvas.height = height;\n      \n      // Reposition planets\n      planets[0].centerX = width * 0.25;\n      planets[0].centerY = height * 0.3;\n      planets[1].centerX = width * 0.75;\n      planets[1].centerY = height * 0.7;\n      planets[2].centerX = width * 0.6;\n      planets[2].centerY = height * 0.2;\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      cancelAnimationFrame(animationFrameId.current);\n    };\n  }, []);\n\n  return (\n    <CanvasContainer>\n      <canvas ref={canvasRef} />\n    </CanvasContainer>\n  );\n};\n\nexport default PlanetaryRingSystem;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}