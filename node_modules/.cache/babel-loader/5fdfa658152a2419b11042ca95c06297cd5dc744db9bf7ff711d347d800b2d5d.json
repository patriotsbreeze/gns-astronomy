{"ast":null,"code":"var _jsxFileName = \"/Users/brendanlo/Documents/GitHub/gns-astronomy/src/components/StarField.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CanvasContainer = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: -2;\n`;\n_c = CanvasContainer;\nconst StarField = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const animationFrameId = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    let width = window.innerWidth;\n    let height = window.innerHeight;\n\n    // Set canvas dimensions\n    canvas.width = width;\n    canvas.height = height;\n\n    // Star class with varied sizes and effects\n    class Star {\n      constructor(x, y, radius, color, twinkleSpeed, moveSpeed) {\n        this.x = x;\n        this.y = y;\n        this.radius = radius;\n        this.baseRadius = radius;\n        this.color = color;\n        this.twinkleSpeed = twinkleSpeed;\n        this.twinkleAmount = Math.random() * 0.5 + 0.5;\n        this.twinklePhase = Math.random() * Math.PI * 2;\n        this.moveSpeed = moveSpeed;\n        this.angle = Math.random() * Math.PI * 2;\n        this.glowSize = radius * (Math.random() * 3 + 2);\n        this.glowOpacity = Math.random() * 0.3 + 0.1;\n\n        // For stars that have rays\n        this.hasRays = radius > 2 && Math.random() > 0.6;\n        this.rayCount = Math.floor(Math.random() * 4) + 4;\n        this.rayLength = radius * (Math.random() * 3 + 2);\n        this.rayWidth = Math.random() * 1 + 0.5;\n        this.rayAngle = Math.random() * Math.PI * 2;\n        this.rayRotationSpeed = (Math.random() * 0.002 + 0.001) * (Math.random() > 0.5 ? 1 : -1);\n\n        // For pulsing stars\n        this.pulseSpeed = Math.random() * 0.05 + 0.02;\n        this.pulsePhase = Math.random() * Math.PI * 2;\n\n        // For color shifting stars\n        this.colorShift = Math.random() > 0.7;\n        this.hue = Math.random() * 360;\n        this.hueSpeed = Math.random() * 0.5 + 0.1;\n      }\n      update() {\n        // Twinkle effect\n        this.twinklePhase += this.twinkleSpeed;\n        const twinkleFactor = Math.sin(this.twinklePhase) * this.twinkleAmount;\n        this.radius = this.baseRadius * (1 + twinkleFactor * 0.3);\n\n        // Subtle movement\n        this.x += Math.cos(this.angle) * this.moveSpeed;\n        this.y += Math.sin(this.angle) * this.moveSpeed;\n\n        // Change direction occasionally\n        if (Math.random() < 0.01) {\n          this.angle = Math.random() * Math.PI * 2;\n        }\n\n        // Keep stars within bounds\n        if (this.x < 0) this.x = width;\n        if (this.x > width) this.x = 0;\n        if (this.y < 0) this.y = height;\n        if (this.y > height) this.y = 0;\n\n        // Rotate rays\n        if (this.hasRays) {\n          this.rayAngle += this.rayRotationSpeed;\n        }\n\n        // Color shift for special stars\n        if (this.colorShift) {\n          this.hue += this.hueSpeed;\n          if (this.hue > 360) this.hue = 0;\n        }\n      }\n      draw(ctx) {\n        ctx.save();\n\n        // Draw glow\n        const gradient = ctx.createRadialGradient(this.x, this.y, 0, this.x, this.y, this.glowSize);\n        let color = this.color;\n        if (this.colorShift) {\n          color = `hsl(${this.hue}, 100%, 80%)`;\n        }\n        gradient.addColorStop(0, color);\n        gradient.addColorStop(1, 'rgba(0, 0, 0, 0)');\n        ctx.beginPath();\n        ctx.arc(this.x, this.y, this.glowSize, 0, Math.PI * 2);\n        ctx.fillStyle = gradient;\n        ctx.globalAlpha = this.glowOpacity * (0.5 + Math.sin(this.twinklePhase) * 0.5);\n        ctx.fill();\n\n        // Draw star core\n        ctx.beginPath();\n        ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);\n        ctx.fillStyle = color;\n        ctx.globalAlpha = 1;\n        ctx.fill();\n\n        // Draw rays for larger stars\n        if (this.hasRays) {\n          ctx.translate(this.x, this.y);\n          ctx.rotate(this.rayAngle);\n          for (let i = 0; i < this.rayCount; i++) {\n            const angle = i / this.rayCount * Math.PI * 2;\n            ctx.save();\n            ctx.rotate(angle);\n\n            // Draw ray\n            ctx.beginPath();\n            ctx.moveTo(0, 0);\n            ctx.lineTo(this.rayLength, 0);\n            ctx.lineWidth = this.rayWidth;\n            ctx.strokeStyle = color;\n            ctx.globalAlpha = 0.7 * (0.5 + Math.sin(this.twinklePhase) * 0.5);\n            ctx.stroke();\n            ctx.restore();\n          }\n        }\n        ctx.restore();\n      }\n    }\n\n    // Create stars with varied sizes and effects\n    const stars = [];\n\n    // Tiny background stars (many)\n    for (let i = 0; i < 300; i++) {\n      stars.push(new Star(Math.random() * width, Math.random() * height, Math.random() * 0.5 + 0.1, 'rgba(255, 255, 255, 0.8)', Math.random() * 0.03 + 0.01, Math.random() * 0.05 + 0.01));\n    }\n\n    // Small stars\n    for (let i = 0; i < 150; i++) {\n      stars.push(new Star(Math.random() * width, Math.random() * height, Math.random() * 1 + 0.5, 'rgba(255, 255, 255, 0.9)', Math.random() * 0.05 + 0.02, Math.random() * 0.1 + 0.05));\n    }\n\n    // Medium stars\n    for (let i = 0; i < 50; i++) {\n      const colors = ['rgba(255, 255, 255, 1)', 'rgba(173, 216, 230, 1)', 'rgba(255, 223, 0, 1)', 'rgba(255, 160, 122, 1)'];\n      stars.push(new Star(Math.random() * width, Math.random() * height, Math.random() * 1.5 + 1, colors[Math.floor(Math.random() * colors.length)], Math.random() * 0.07 + 0.03, Math.random() * 0.15 + 0.05));\n    }\n\n    // Large stars (few)\n    for (let i = 0; i < 20; i++) {\n      const colors = ['rgba(255, 255, 255, 1)', 'rgba(135, 206, 250, 1)', 'rgba(255, 215, 0, 1)', 'rgba(255, 99, 71, 1)', 'rgba(147, 112, 219, 1)'];\n      stars.push(new Star(Math.random() * width, Math.random() * height, Math.random() * 2 + 2, colors[Math.floor(Math.random() * colors.length)], Math.random() * 0.1 + 0.05, Math.random() * 0.2 + 0.1));\n    }\n\n    // Animation loop\n    const animate = () => {\n      ctx.clearRect(0, 0, width, height);\n\n      // Update and draw stars\n      stars.forEach(star => {\n        star.update();\n        star.draw(ctx);\n      });\n      animationFrameId.current = requestAnimationFrame(animate);\n    };\n    animate();\n\n    // Handle window resize\n    const handleResize = () => {\n      width = window.innerWidth;\n      height = window.innerHeight;\n      canvas.width = width;\n      canvas.height = height;\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      cancelAnimationFrame(animationFrameId.current);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(CanvasContainer, {\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 248,\n    columnNumber: 5\n  }, this);\n};\n_s(StarField, \"Rfn34oS1ODdV6cItKU2kKgVT1r8=\");\n_c2 = StarField;\nexport default StarField;\nvar _c, _c2;\n$RefreshReg$(_c, \"CanvasContainer\");\n$RefreshReg$(_c2, \"StarField\");","map":{"version":3,"names":["React","useEffect","useRef","styled","jsxDEV","_jsxDEV","CanvasContainer","div","_c","StarField","_s","canvasRef","animationFrameId","canvas","current","ctx","getContext","width","window","innerWidth","height","innerHeight","Star","constructor","x","y","radius","color","twinkleSpeed","moveSpeed","baseRadius","twinkleAmount","Math","random","twinklePhase","PI","angle","glowSize","glowOpacity","hasRays","rayCount","floor","rayLength","rayWidth","rayAngle","rayRotationSpeed","pulseSpeed","pulsePhase","colorShift","hue","hueSpeed","update","twinkleFactor","sin","cos","draw","save","gradient","createRadialGradient","addColorStop","beginPath","arc","fillStyle","globalAlpha","fill","translate","rotate","i","moveTo","lineTo","lineWidth","strokeStyle","stroke","restore","stars","push","colors","length","animate","clearRect","forEach","star","requestAnimationFrame","handleResize","addEventListener","removeEventListener","cancelAnimationFrame","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["/Users/brendanlo/Documents/GitHub/gns-astronomy/src/components/StarField.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\n\nconst CanvasContainer = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: -2;\n`;\n\nconst StarField = () => {\n  const canvasRef = useRef(null);\n  const animationFrameId = useRef(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    let width = window.innerWidth;\n    let height = window.innerHeight;\n\n    // Set canvas dimensions\n    canvas.width = width;\n    canvas.height = height;\n\n    // Star class with varied sizes and effects\n    class Star {\n      constructor(x, y, radius, color, twinkleSpeed, moveSpeed) {\n        this.x = x;\n        this.y = y;\n        this.radius = radius;\n        this.baseRadius = radius;\n        this.color = color;\n        this.twinkleSpeed = twinkleSpeed;\n        this.twinkleAmount = Math.random() * 0.5 + 0.5;\n        this.twinklePhase = Math.random() * Math.PI * 2;\n        this.moveSpeed = moveSpeed;\n        this.angle = Math.random() * Math.PI * 2;\n        this.glowSize = radius * (Math.random() * 3 + 2);\n        this.glowOpacity = Math.random() * 0.3 + 0.1;\n        \n        // For stars that have rays\n        this.hasRays = radius > 2 && Math.random() > 0.6;\n        this.rayCount = Math.floor(Math.random() * 4) + 4;\n        this.rayLength = radius * (Math.random() * 3 + 2);\n        this.rayWidth = Math.random() * 1 + 0.5;\n        this.rayAngle = Math.random() * Math.PI * 2;\n        this.rayRotationSpeed = (Math.random() * 0.002 + 0.001) * (Math.random() > 0.5 ? 1 : -1);\n        \n        // For pulsing stars\n        this.pulseSpeed = Math.random() * 0.05 + 0.02;\n        this.pulsePhase = Math.random() * Math.PI * 2;\n        \n        // For color shifting stars\n        this.colorShift = Math.random() > 0.7;\n        this.hue = Math.random() * 360;\n        this.hueSpeed = Math.random() * 0.5 + 0.1;\n      }\n\n      update() {\n        // Twinkle effect\n        this.twinklePhase += this.twinkleSpeed;\n        const twinkleFactor = Math.sin(this.twinklePhase) * this.twinkleAmount;\n        this.radius = this.baseRadius * (1 + twinkleFactor * 0.3);\n        \n        // Subtle movement\n        this.x += Math.cos(this.angle) * this.moveSpeed;\n        this.y += Math.sin(this.angle) * this.moveSpeed;\n        \n        // Change direction occasionally\n        if (Math.random() < 0.01) {\n          this.angle = Math.random() * Math.PI * 2;\n        }\n        \n        // Keep stars within bounds\n        if (this.x < 0) this.x = width;\n        if (this.x > width) this.x = 0;\n        if (this.y < 0) this.y = height;\n        if (this.y > height) this.y = 0;\n        \n        // Rotate rays\n        if (this.hasRays) {\n          this.rayAngle += this.rayRotationSpeed;\n        }\n        \n        // Color shift for special stars\n        if (this.colorShift) {\n          this.hue += this.hueSpeed;\n          if (this.hue > 360) this.hue = 0;\n        }\n      }\n\n      draw(ctx) {\n        ctx.save();\n        \n        // Draw glow\n        const gradient = ctx.createRadialGradient(\n          this.x, this.y, 0, \n          this.x, this.y, this.glowSize\n        );\n        \n        let color = this.color;\n        if (this.colorShift) {\n          color = `hsl(${this.hue}, 100%, 80%)`;\n        }\n        \n        gradient.addColorStop(0, color);\n        gradient.addColorStop(1, 'rgba(0, 0, 0, 0)');\n        \n        ctx.beginPath();\n        ctx.arc(this.x, this.y, this.glowSize, 0, Math.PI * 2);\n        ctx.fillStyle = gradient;\n        ctx.globalAlpha = this.glowOpacity * (0.5 + Math.sin(this.twinklePhase) * 0.5);\n        ctx.fill();\n        \n        // Draw star core\n        ctx.beginPath();\n        ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);\n        ctx.fillStyle = color;\n        ctx.globalAlpha = 1;\n        ctx.fill();\n        \n        // Draw rays for larger stars\n        if (this.hasRays) {\n          ctx.translate(this.x, this.y);\n          ctx.rotate(this.rayAngle);\n          \n          for (let i = 0; i < this.rayCount; i++) {\n            const angle = (i / this.rayCount) * Math.PI * 2;\n            ctx.save();\n            ctx.rotate(angle);\n            \n            // Draw ray\n            ctx.beginPath();\n            ctx.moveTo(0, 0);\n            ctx.lineTo(this.rayLength, 0);\n            ctx.lineWidth = this.rayWidth;\n            ctx.strokeStyle = color;\n            ctx.globalAlpha = 0.7 * (0.5 + Math.sin(this.twinklePhase) * 0.5);\n            ctx.stroke();\n            \n            ctx.restore();\n          }\n        }\n        \n        ctx.restore();\n      }\n    }\n\n    // Create stars with varied sizes and effects\n    const stars = [];\n    \n    // Tiny background stars (many)\n    for (let i = 0; i < 300; i++) {\n      stars.push(new Star(\n        Math.random() * width,\n        Math.random() * height,\n        Math.random() * 0.5 + 0.1,\n        'rgba(255, 255, 255, 0.8)',\n        Math.random() * 0.03 + 0.01,\n        Math.random() * 0.05 + 0.01\n      ));\n    }\n    \n    // Small stars\n    for (let i = 0; i < 150; i++) {\n      stars.push(new Star(\n        Math.random() * width,\n        Math.random() * height,\n        Math.random() * 1 + 0.5,\n        'rgba(255, 255, 255, 0.9)',\n        Math.random() * 0.05 + 0.02,\n        Math.random() * 0.1 + 0.05\n      ));\n    }\n    \n    // Medium stars\n    for (let i = 0; i < 50; i++) {\n      const colors = [\n        'rgba(255, 255, 255, 1)',\n        'rgba(173, 216, 230, 1)',\n        'rgba(255, 223, 0, 1)',\n        'rgba(255, 160, 122, 1)'\n      ];\n      stars.push(new Star(\n        Math.random() * width,\n        Math.random() * height,\n        Math.random() * 1.5 + 1,\n        colors[Math.floor(Math.random() * colors.length)],\n        Math.random() * 0.07 + 0.03,\n        Math.random() * 0.15 + 0.05\n      ));\n    }\n    \n    // Large stars (few)\n    for (let i = 0; i < 20; i++) {\n      const colors = [\n        'rgba(255, 255, 255, 1)',\n        'rgba(135, 206, 250, 1)',\n        'rgba(255, 215, 0, 1)',\n        'rgba(255, 99, 71, 1)',\n        'rgba(147, 112, 219, 1)'\n      ];\n      stars.push(new Star(\n        Math.random() * width,\n        Math.random() * height,\n        Math.random() * 2 + 2,\n        colors[Math.floor(Math.random() * colors.length)],\n        Math.random() * 0.1 + 0.05,\n        Math.random() * 0.2 + 0.1\n      ));\n    }\n\n    // Animation loop\n    const animate = () => {\n      ctx.clearRect(0, 0, width, height);\n      \n      // Update and draw stars\n      stars.forEach(star => {\n        star.update();\n        star.draw(ctx);\n      });\n      \n      animationFrameId.current = requestAnimationFrame(animate);\n    };\n    \n    animate();\n\n    // Handle window resize\n    const handleResize = () => {\n      width = window.innerWidth;\n      height = window.innerHeight;\n      canvas.width = width;\n      canvas.height = height;\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      cancelAnimationFrame(animationFrameId.current);\n    };\n  }, []);\n\n  return (\n    <CanvasContainer>\n      <canvas ref={canvasRef} />\n    </CanvasContainer>\n  );\n};\n\nexport default StarField;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}